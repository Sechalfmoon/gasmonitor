package com.gasmonitor.protobuf;// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GasMsg.proto

public final class GasMsg {
  private GasMsg() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface GasDataOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required string hardware = 1;
    /**
     * <code>required string hardware = 1;</code>
     *
     * <pre>
     * 设备ID
     * </pre>
     */
    boolean hasHardware();
    /**
     * <code>required string hardware = 1;</code>
     *
     * <pre>
     * 设备ID
     * </pre>
     */
    String getHardware();
    /**
     * <code>required string hardware = 1;</code>
     *
     * <pre>
     * 设备ID
     * </pre>
     */
    com.google.protobuf.ByteString
        getHardwareBytes();

    // required float pressure = 2;
    /**
     * <code>required float pressure = 2;</code>
     *
     * <pre>
     * 压力
     * </pre>
     */
    boolean hasPressure();
    /**
     * <code>required float pressure = 2;</code>
     *
     * <pre>
     * 压力
     * </pre>
     */
    float getPressure();

    // required float temperature = 3;
    /**
     * <code>required float temperature = 3;</code>
     *
     * <pre>
     * 温度
     * </pre>
     */
    boolean hasTemperature();
    /**
     * <code>required float temperature = 3;</code>
     *
     * <pre>
     * 温度
     * </pre>
     */
    float getTemperature();

    // required float standardFlow = 4;
    /**
     * <code>required float standardFlow = 4;</code>
     *
     * <pre>
     * 标况流量
     * </pre>
     */
    boolean hasStandardFlow();
    /**
     * <code>required float standardFlow = 4;</code>
     *
     * <pre>
     * 标况流量
     * </pre>
     */
    float getStandardFlow();

    // required float workFlow = 5;
    /**
     * <code>required float workFlow = 5;</code>
     *
     * <pre>
     * 工作流量
     * </pre>
     */
    boolean hasWorkFlow();
    /**
     * <code>required float workFlow = 5;</code>
     *
     * <pre>
     * 工作流量
     * </pre>
     */
    float getWorkFlow();

    // required float sumFlow = 6;
    /**
     * <code>required float sumFlow = 6;</code>
     *
     * <pre>
     * 总流量
     * </pre>
     */
    boolean hasSumFlow();
    /**
     * <code>required float sumFlow = 6;</code>
     *
     * <pre>
     * 总流量
     * </pre>
     */
    float getSumFlow();

    // required int64 pointTime = 7;
    /**
     * <code>required int64 pointTime = 7;</code>
     *
     * <pre>
     *日期
     * </pre>
     */
    boolean hasPointTime();
    /**
     * <code>required int64 pointTime = 7;</code>
     *
     * <pre>
     *日期
     * </pre>
     */
    long getPointTime();
  }
  /**
   * Protobuf type {@code GasData}
   */
  public static final class GasData extends
      com.google.protobuf.GeneratedMessage
      implements GasDataOrBuilder {
    // Use GasData.newBuilder() to construct.
    private GasData(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private GasData(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final GasData defaultInstance;
    public static GasData getDefaultInstance() {
      return defaultInstance;
    }

    public GasData getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private GasData(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              bitField0_ |= 0x00000001;
              hardware_ = input.readBytes();
              break;
            }
            case 21: {
              bitField0_ |= 0x00000002;
              pressure_ = input.readFloat();
              break;
            }
            case 29: {
              bitField0_ |= 0x00000004;
              temperature_ = input.readFloat();
              break;
            }
            case 37: {
              bitField0_ |= 0x00000008;
              standardFlow_ = input.readFloat();
              break;
            }
            case 45: {
              bitField0_ |= 0x00000010;
              workFlow_ = input.readFloat();
              break;
            }
            case 53: {
              bitField0_ |= 0x00000020;
              sumFlow_ = input.readFloat();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              pointTime_ = input.readInt64();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return GasMsg.internal_static_GasData_descriptor;
    }

    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return GasMsg.internal_static_GasData_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              GasData.class, Builder.class);
    }

    public static com.google.protobuf.Parser<GasData> PARSER =
        new com.google.protobuf.AbstractParser<GasData>() {
      public GasData parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new GasData(input, extensionRegistry);
      }
    };

    @Override
    public com.google.protobuf.Parser<GasData> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required string hardware = 1;
    public static final int HARDWARE_FIELD_NUMBER = 1;
    private Object hardware_;
    /**
     * <code>required string hardware = 1;</code>
     *
     * <pre>
     * 设备ID
     * </pre>
     */
    public boolean hasHardware() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required string hardware = 1;</code>
     *
     * <pre>
     * 设备ID
     * </pre>
     */
    public String getHardware() {
      Object ref = hardware_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          hardware_ = s;
        }
        return s;
      }
    }
    /**
     * <code>required string hardware = 1;</code>
     *
     * <pre>
     * 设备ID
     * </pre>
     */
    public com.google.protobuf.ByteString
        getHardwareBytes() {
      Object ref = hardware_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        hardware_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // required float pressure = 2;
    public static final int PRESSURE_FIELD_NUMBER = 2;
    private float pressure_;
    /**
     * <code>required float pressure = 2;</code>
     *
     * <pre>
     * 压力
     * </pre>
     */
    public boolean hasPressure() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required float pressure = 2;</code>
     *
     * <pre>
     * 压力
     * </pre>
     */
    public float getPressure() {
      return pressure_;
    }

    // required float temperature = 3;
    public static final int TEMPERATURE_FIELD_NUMBER = 3;
    private float temperature_;
    /**
     * <code>required float temperature = 3;</code>
     *
     * <pre>
     * 温度
     * </pre>
     */
    public boolean hasTemperature() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required float temperature = 3;</code>
     *
     * <pre>
     * 温度
     * </pre>
     */
    public float getTemperature() {
      return temperature_;
    }

    // required float standardFlow = 4;
    public static final int STANDARDFLOW_FIELD_NUMBER = 4;
    private float standardFlow_;
    /**
     * <code>required float standardFlow = 4;</code>
     *
     * <pre>
     * 标况流量
     * </pre>
     */
    public boolean hasStandardFlow() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required float standardFlow = 4;</code>
     *
     * <pre>
     * 标况流量
     * </pre>
     */
    public float getStandardFlow() {
      return standardFlow_;
    }

    // required float workFlow = 5;
    public static final int WORKFLOW_FIELD_NUMBER = 5;
    private float workFlow_;
    /**
     * <code>required float workFlow = 5;</code>
     *
     * <pre>
     * 工作流量
     * </pre>
     */
    public boolean hasWorkFlow() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>required float workFlow = 5;</code>
     *
     * <pre>
     * 工作流量
     * </pre>
     */
    public float getWorkFlow() {
      return workFlow_;
    }

    // required float sumFlow = 6;
    public static final int SUMFLOW_FIELD_NUMBER = 6;
    private float sumFlow_;
    /**
     * <code>required float sumFlow = 6;</code>
     *
     * <pre>
     * 总流量
     * </pre>
     */
    public boolean hasSumFlow() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>required float sumFlow = 6;</code>
     *
     * <pre>
     * 总流量
     * </pre>
     */
    public float getSumFlow() {
      return sumFlow_;
    }

    // required int64 pointTime = 7;
    public static final int POINTTIME_FIELD_NUMBER = 7;
    private long pointTime_;
    /**
     * <code>required int64 pointTime = 7;</code>
     *
     * <pre>
     *日期
     * </pre>
     */
    public boolean hasPointTime() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>required int64 pointTime = 7;</code>
     *
     * <pre>
     *日期
     * </pre>
     */
    public long getPointTime() {
      return pointTime_;
    }

    private void initFields() {
      hardware_ = "";
      pressure_ = 0F;
      temperature_ = 0F;
      standardFlow_ = 0F;
      workFlow_ = 0F;
      sumFlow_ = 0F;
      pointTime_ = 0L;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasHardware()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasPressure()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasTemperature()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasStandardFlow()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasWorkFlow()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasSumFlow()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasPointTime()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getHardwareBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeFloat(2, pressure_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeFloat(3, temperature_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeFloat(4, standardFlow_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeFloat(5, workFlow_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeFloat(6, sumFlow_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt64(7, pointTime_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getHardwareBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(2, pressure_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(3, temperature_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(4, standardFlow_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(5, workFlow_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(6, sumFlow_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(7, pointTime_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @Override
    protected Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static GasData parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static GasData parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static GasData parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static GasData parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static GasData parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static GasData parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static GasData parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static GasData parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static GasData parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static GasData parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(GasData prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @Override
    protected Builder newBuilderForType(
        BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code GasData}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements GasDataOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return GasMsg.internal_static_GasData_descriptor;
      }

      protected FieldAccessorTable
          internalGetFieldAccessorTable() {
        return GasMsg.internal_static_GasData_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                GasData.class, Builder.class);
      }

      // Construct using GasMsg.GasData.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        hardware_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        pressure_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000002);
        temperature_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000004);
        standardFlow_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000008);
        workFlow_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000010);
        sumFlow_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000020);
        pointTime_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return GasMsg.internal_static_GasData_descriptor;
      }

      public GasData getDefaultInstanceForType() {
        return GasData.getDefaultInstance();
      }

      public GasData build() {
        GasData result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public GasData buildPartial() {
        GasData result = new GasData(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.hardware_ = hardware_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.pressure_ = pressure_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.temperature_ = temperature_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.standardFlow_ = standardFlow_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.workFlow_ = workFlow_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.sumFlow_ = sumFlow_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.pointTime_ = pointTime_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof GasData) {
          return mergeFrom((GasData)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(GasData other) {
        if (other == GasData.getDefaultInstance()) return this;
        if (other.hasHardware()) {
          bitField0_ |= 0x00000001;
          hardware_ = other.hardware_;
          onChanged();
        }
        if (other.hasPressure()) {
          setPressure(other.getPressure());
        }
        if (other.hasTemperature()) {
          setTemperature(other.getTemperature());
        }
        if (other.hasStandardFlow()) {
          setStandardFlow(other.getStandardFlow());
        }
        if (other.hasWorkFlow()) {
          setWorkFlow(other.getWorkFlow());
        }
        if (other.hasSumFlow()) {
          setSumFlow(other.getSumFlow());
        }
        if (other.hasPointTime()) {
          setPointTime(other.getPointTime());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasHardware()) {
          
          return false;
        }
        if (!hasPressure()) {
          
          return false;
        }
        if (!hasTemperature()) {
          
          return false;
        }
        if (!hasStandardFlow()) {
          
          return false;
        }
        if (!hasWorkFlow()) {
          
          return false;
        }
        if (!hasSumFlow()) {
          
          return false;
        }
        if (!hasPointTime()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        GasData parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (GasData) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required string hardware = 1;
      private Object hardware_ = "";
      /**
       * <code>required string hardware = 1;</code>
       *
       * <pre>
       * 设备ID
       * </pre>
       */
      public boolean hasHardware() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required string hardware = 1;</code>
       *
       * <pre>
       * 设备ID
       * </pre>
       */
      public String getHardware() {
        Object ref = hardware_;
        if (!(ref instanceof String)) {
          String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          hardware_ = s;
          return s;
        } else {
          return (String) ref;
        }
      }
      /**
       * <code>required string hardware = 1;</code>
       *
       * <pre>
       * 设备ID
       * </pre>
       */
      public com.google.protobuf.ByteString
          getHardwareBytes() {
        Object ref = hardware_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (String) ref);
          hardware_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>required string hardware = 1;</code>
       *
       * <pre>
       * 设备ID
       * </pre>
       */
      public Builder setHardware(
          String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        hardware_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required string hardware = 1;</code>
       *
       * <pre>
       * 设备ID
       * </pre>
       */
      public Builder clearHardware() {
        bitField0_ = (bitField0_ & ~0x00000001);
        hardware_ = getDefaultInstance().getHardware();
        onChanged();
        return this;
      }
      /**
       * <code>required string hardware = 1;</code>
       *
       * <pre>
       * 设备ID
       * </pre>
       */
      public Builder setHardwareBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        hardware_ = value;
        onChanged();
        return this;
      }

      // required float pressure = 2;
      private float pressure_ ;
      /**
       * <code>required float pressure = 2;</code>
       *
       * <pre>
       * 压力
       * </pre>
       */
      public boolean hasPressure() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required float pressure = 2;</code>
       *
       * <pre>
       * 压力
       * </pre>
       */
      public float getPressure() {
        return pressure_;
      }
      /**
       * <code>required float pressure = 2;</code>
       *
       * <pre>
       * 压力
       * </pre>
       */
      public Builder setPressure(float value) {
        bitField0_ |= 0x00000002;
        pressure_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float pressure = 2;</code>
       *
       * <pre>
       * 压力
       * </pre>
       */
      public Builder clearPressure() {
        bitField0_ = (bitField0_ & ~0x00000002);
        pressure_ = 0F;
        onChanged();
        return this;
      }

      // required float temperature = 3;
      private float temperature_ ;
      /**
       * <code>required float temperature = 3;</code>
       *
       * <pre>
       * 温度
       * </pre>
       */
      public boolean hasTemperature() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required float temperature = 3;</code>
       *
       * <pre>
       * 温度
       * </pre>
       */
      public float getTemperature() {
        return temperature_;
      }
      /**
       * <code>required float temperature = 3;</code>
       *
       * <pre>
       * 温度
       * </pre>
       */
      public Builder setTemperature(float value) {
        bitField0_ |= 0x00000004;
        temperature_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float temperature = 3;</code>
       *
       * <pre>
       * 温度
       * </pre>
       */
      public Builder clearTemperature() {
        bitField0_ = (bitField0_ & ~0x00000004);
        temperature_ = 0F;
        onChanged();
        return this;
      }

      // required float standardFlow = 4;
      private float standardFlow_ ;
      /**
       * <code>required float standardFlow = 4;</code>
       *
       * <pre>
       * 标况流量
       * </pre>
       */
      public boolean hasStandardFlow() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required float standardFlow = 4;</code>
       *
       * <pre>
       * 标况流量
       * </pre>
       */
      public float getStandardFlow() {
        return standardFlow_;
      }
      /**
       * <code>required float standardFlow = 4;</code>
       *
       * <pre>
       * 标况流量
       * </pre>
       */
      public Builder setStandardFlow(float value) {
        bitField0_ |= 0x00000008;
        standardFlow_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float standardFlow = 4;</code>
       *
       * <pre>
       * 标况流量
       * </pre>
       */
      public Builder clearStandardFlow() {
        bitField0_ = (bitField0_ & ~0x00000008);
        standardFlow_ = 0F;
        onChanged();
        return this;
      }

      // required float workFlow = 5;
      private float workFlow_ ;
      /**
       * <code>required float workFlow = 5;</code>
       *
       * <pre>
       * 工作流量
       * </pre>
       */
      public boolean hasWorkFlow() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>required float workFlow = 5;</code>
       *
       * <pre>
       * 工作流量
       * </pre>
       */
      public float getWorkFlow() {
        return workFlow_;
      }
      /**
       * <code>required float workFlow = 5;</code>
       *
       * <pre>
       * 工作流量
       * </pre>
       */
      public Builder setWorkFlow(float value) {
        bitField0_ |= 0x00000010;
        workFlow_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float workFlow = 5;</code>
       *
       * <pre>
       * 工作流量
       * </pre>
       */
      public Builder clearWorkFlow() {
        bitField0_ = (bitField0_ & ~0x00000010);
        workFlow_ = 0F;
        onChanged();
        return this;
      }

      // required float sumFlow = 6;
      private float sumFlow_ ;
      /**
       * <code>required float sumFlow = 6;</code>
       *
       * <pre>
       * 总流量
       * </pre>
       */
      public boolean hasSumFlow() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>required float sumFlow = 6;</code>
       *
       * <pre>
       * 总流量
       * </pre>
       */
      public float getSumFlow() {
        return sumFlow_;
      }
      /**
       * <code>required float sumFlow = 6;</code>
       *
       * <pre>
       * 总流量
       * </pre>
       */
      public Builder setSumFlow(float value) {
        bitField0_ |= 0x00000020;
        sumFlow_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required float sumFlow = 6;</code>
       *
       * <pre>
       * 总流量
       * </pre>
       */
      public Builder clearSumFlow() {
        bitField0_ = (bitField0_ & ~0x00000020);
        sumFlow_ = 0F;
        onChanged();
        return this;
      }

      // required int64 pointTime = 7;
      private long pointTime_ ;
      /**
       * <code>required int64 pointTime = 7;</code>
       *
       * <pre>
       *日期
       * </pre>
       */
      public boolean hasPointTime() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>required int64 pointTime = 7;</code>
       *
       * <pre>
       *日期
       * </pre>
       */
      public long getPointTime() {
        return pointTime_;
      }
      /**
       * <code>required int64 pointTime = 7;</code>
       *
       * <pre>
       *日期
       * </pre>
       */
      public Builder setPointTime(long value) {
        bitField0_ |= 0x00000040;
        pointTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int64 pointTime = 7;</code>
       *
       * <pre>
       *日期
       * </pre>
       */
      public Builder clearPointTime() {
        bitField0_ = (bitField0_ & ~0x00000040);
        pointTime_ = 0L;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:GasData)
    }

    static {
      defaultInstance = new GasData(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:GasData)
  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_GasData_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_GasData_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    String[] descriptorData = {
      "\n\014GasMsg.proto\"\216\001\n\007GasData\022\020\n\010hardware\030\001" +
      " \002(\t\022\020\n\010pressure\030\002 \002(\002\022\023\n\013temperature\030\003 " +
      "\002(\002\022\024\n\014standardFlow\030\004 \002(\002\022\020\n\010workFlow\030\005 " +
      "\002(\002\022\017\n\007sumFlow\030\006 \002(\002\022\021\n\tpointTime\030\007 \002(\003"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_GasData_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_GasData_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_GasData_descriptor,
              new String[] { "Hardware", "Pressure", "Temperature", "StandardFlow", "WorkFlow", "SumFlow", "PointTime", });
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}

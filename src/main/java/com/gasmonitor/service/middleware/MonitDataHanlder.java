package com.gasmonitor.service.middleware;import com.gasmonitor.entity.Device;import com.gasmonitor.entity.User;import com.gasmonitor.pros.HazelCastPros;import com.gasmonitor.vo.MonitorData;import com.hazelcast.core.HazelcastInstance;import com.hazelcast.core.IMap;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.messaging.simp.SimpMessagingTemplate;import org.springframework.scheduling.annotation.Async;import org.springframework.stereotype.Service;/** * Created by saplmm on 2017/7/29. * 专门处理监控数据 */@Servicepublic class MonitDataHanlder {    private Logger log = LoggerFactory.getLogger(MonitDataHanlder.class);    @Autowired    private HazelcastInstance hazelcastInstance;    @Autowired    public SimpMessagingTemplate template;    @Autowired    private HazelCastPros hazelCastPros;    private IMap<Long, Device> deviceIMap;    private IMap<Long, User> userImap;    public IMap<Long, Device> getDeviceIMap() {        if (deviceIMap == null) {            deviceIMap = hazelcastInstance.getMap(hazelCastPros.getMapdeviceall());        }        return deviceIMap;    }    public IMap<Long, User> getUserImap() {        if (userImap == null) {            userImap = hazelcastInstance.getMap(hazelCastPros.getMapuserall());        }        return userImap;    }    @Async    public void handlerMonitor(MonitorData data) {        log.info("handlrMOnitor开始处理data:{}", data);        Device d = getDeviceIMap().get(data.getGasEvent().getHardwareId());        log.info("handlrMOnitor开始处理data:{}，查询device:{}", data, d);        String userName = getUserImap().get(d.getWatcher()).getUsername();        log.info("handlrMOnitor开始处理data:{}，发送给user:{}", data, userName);        template.convertAndSendToUser(userName, "/queue/notifications", data);    }}
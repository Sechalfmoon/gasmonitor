package com.gasmonitor.service.device;import com.gasmonitor.dao.DeviceRepository;import com.gasmonitor.entity.Device;import com.gasmonitor.pros.HazelCastPros;import com.gasmonitor.service.device.api.DeviceService;import com.gasmonitor.vo.AjaxResult;import com.hazelcast.core.HazelcastInstance;import com.hazelcast.core.IMap;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import java.util.Date;import java.util.List;/** * Created by saplmm on 2017/7/10. */@Servicepublic class DeviceServiceImp implements DeviceService {    private Logger log = LoggerFactory.getLogger(DeviceServiceImp.class);    @Autowired    private DeviceRepository deviceRepository;    @Autowired    private HazelcastInstance hazelcastInstance;    @Autowired    private HazelCastPros hazelCastPros;    @Override    @Transactional    public Device addDevice(Device device, Long tenantId) {        log.info("开始增加一个设备:{},tenantId:{}", device, tenantId);        if (tenantId == null) {            log.info("增加device 失败，因为tenantid ==null");            return null;        }        //1，把数据保存到数据库        device.setId(null);        device.setCreated(new Date());        device.setTokenId("");        log.info("保存之前的设备:{}", device);        device = deviceRepository.save(device);        log.info("保存之后的设备:{}", device);        //2,更新hazelcast的map        IMap<String, String> map = hazelcastInstance.getMap(hazelCastPros.getMaptenant());        map.set(device.getHardwareId(), tenantId + "");        return device;    }    @Override    public AjaxResult<Device> updateDevice(Device newDevice) {        AjaxResult ret;        Device device = deviceRepository.findOne(newDevice.getId());        //如果在数据库中没有找到对应的设备，表示修改失败        if (device == null) {            ret = AjaxResult.ErrorAjaxResult();            ret.setMsg("没有找到对应的设备，修改失败");            return ret;        }        //找到对应的设备之后，修改并保存        device.setTokenId(newDevice.getTokenId());        device.setName(newDevice.getName());        device.setLogic(newDevice.getLogic());        device.setSiteId(newDevice.getSiteId());        device.setStatus(newDevice.getStatus());        device.setParent(newDevice.getParent());        device.setHardwareId(newDevice.getHardwareId());        log.info("创建新的设备:{}", device);        Device retDevie = deviceRepository.save(device);        return new AjaxResult<>(retDevie);    }    @Override    public List<Device> findDeviceBySiteId(long siteId) {        //1,找到根节点        List<Device> parent = deviceRepository.findBySiteIdAndParent(siteId, (long) 0);        //找子节点        for (Device d : parent) {            d.setChildren(deviceRepository.findBySiteIdAndParent(siteId, d.getId()));        }        return parent;    }}
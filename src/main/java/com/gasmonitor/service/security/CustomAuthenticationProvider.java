package com.gasmonitor.service.security;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.security.authentication.AuthenticationProvider;import org.springframework.security.authentication.BadCredentialsException;import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;import org.springframework.security.core.Authentication;import org.springframework.security.core.AuthenticationException;import org.springframework.security.core.GrantedAuthority;import org.springframework.security.core.userdetails.UserDetails;import org.springframework.stereotype.Component;import java.util.Collection;/** * Created by saplmm on 2017/7/22. */@Componentpublic class CustomAuthenticationProvider implements AuthenticationProvider {    private Logger log = LoggerFactory.getLogger(CustomAuthenticationProvider.class);    @Autowired    private CustomUserDetailsService customUserDetailsService;    @Override    public Authentication authenticate(Authentication authentication)            throws AuthenticationException {        CustomWebAuthenticationDetails details = (CustomWebAuthenticationDetails) authentication.getDetails();  // 如上面的介绍，这里通过authentication.getDetails()获取详细信息        String username = authentication.getName();        String password = (String) authentication.getCredentials();        log.debug("开始验证-->得到的参数: details-->{}", details);        log.debug("开始验证-->得到的参数: username-->{}", username);        log.debug("开始验证-->得到的参数: password-->{}", password);        log.debug("开始验证-->得到的参数: remoteAddress-->{}", details.getRemoteAddress());        log.debug("开始验证-->得到的参数: sessionId-->{}", details.getSessionId());        log.debug("开始验证-->得到的参数: token-->{}", details.getToken());        log.debug("开始验证-->得到的参数: deviceId-->{}", details.getDeviceId());        UserDetails user = customUserDetailsService.loadUserByUsername(username);        if (user == null) {            throw new BadCredentialsException("Username not found.");        }        //加密过程在这里体现        if (!password.equals(user.getPassword())) {            throw new BadCredentialsException("Wrong password.");        }        Collection<? extends GrantedAuthority> authorities = user.getAuthorities();        return new UsernamePasswordAuthenticationToken(user, password, authorities);    }    @Override    public boolean supports(Class<?> arg0) {        return true;    }}